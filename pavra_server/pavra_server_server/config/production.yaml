# This is the configuration file for your production environment.
# Typically, you will want to route the traffic through a load balancer
# which adds SSL security through https. If you use Serverpod's standard
# Terraform scripts to deploy your server, all you need to change in
# this file is the examplepod.com domain name.

# Configuration for the main API server.
apiServer:
  port: 8080
  publicHost: ${PUBLIC_HOST}
  publicPort: 443
  publicScheme: https

# Configuration for the Insights server.
insightsServer:
  port: 8081
  publicHost: https://pavra-insights.up.railway.app
  publicPort: 443
  publicScheme: https

# Configuration for the web server.
webServer:
  port: 8082
  publicHost: https://pavra-web.up.railway.app
  publicPort: 443
  publicScheme: https


# Database - Railway PostgreSQL (dummy, not used, all data via Supabase REST API)
database:
  host: postgres.railway.internal
  port: 5432
  name: postgres
  user: postgres
  password: ${PGPASSWORD}

# This is the setup for Redis (Railway Redis)
redis:
  enabled: false  # Set to true when you have Railway Redis
  host: redis.railway.internal
  port: 6379
  password: ${REDIS_PASSWORD}
  requireSsl: false

maxRequestSize: 524288 # The maximum size of requests allowed in bytes

sessionLogs:
  consoleEnabled: false
  persistentEnabled: true
# consoleLogFormat: json # Defaults to "json", options are "text" or "json"

futureCallExecutionEnabled: true #defaults to true

#futureCall:
#  concurrencyLimit: 1 # Defaults to 1, a negative or null value removes the limit
#  scanInterval: 5000 # Unit in milliseconds, defaults to 5000

# Security secret â€” you create this yourself
serviceSecret: ${SERVICE_SECRET}